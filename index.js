console.log("salem alem");

// 1.  Встроенная функция `setTimeout` использует колбэк-функции. Создайте альтернативу, использующую промисы.
// Функция `delay(ms)` должна возвращать промис, который перейдёт в состояние «выполнен» через `ms` миллисекунд,
// так чтобы мы могли добавить к нему `.then`:
function delay(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(), ms);
  });
}

delay(3000).then(() => alert("выполнилось через 3 секунды"));

// 2. Можно ли "перевыполнить" промис?
// Что выведет код ниже?

let promise = new Promise(function (resolve, reject) {
  resolve(1);

  setTimeout(() => resolve(2), 1000);
});

// promise.then(alert);
// выведется первый resolve, второй будет игнорироваться, так как  у промиса только один итог/результат/ошибка

// 3. Промисы: сравните then и catch
// Являются ли фрагменты кода ниже эквивалентными?
// Другими словами, ведут ли они себя одинаково во всех обстоятельствах, для всех переданных им обработчиков?

promise.then(f1).catch(f2);

promise.then(f1, f2);

// нет они не эквивалентны
// в случае первого кода: если  сработает f1, в это время catch проигнорируется
// в случае error сработает catch

// во втором же коде  если выдаст ошибку f1, то ошибка просто не обработается, (она уйдет во внешний код?  и что тогда будет с f2? )
